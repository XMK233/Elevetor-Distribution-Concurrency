输入的格式：(FR, n, UP/DOWN, t).(ER, n, t)，在一行中输入，每个请求之间都由‘.’隔开，结果会分行输出
输入的格式应为如上。。

可能有的限制：
1. 如果有一系列相同请求时间相同，会被当作是不合法的输入，无法进行电梯调度。各条指令发出的时刻必须各不相同且单调递增。
2. 该程序最多只取99条指令，如果其中有错误的指令，会被删除，真正处理的指令数可能不到99个
3. 输入的原始数据长度不能超过3000个字符,否则直接不予计算报错
4. 输入的所有数字数据必须都是int类型的整数
5. 输入空指令报错
6. 输入的单个数据包括前导零在内不得超过6位整数，否则当作输入不合法，不予计算直接报错
7. 哪怕仅仅是一个单项式中有格式错误都会导致出现不合法输入的错误，所有其他的有效指令都不予计算
8. 认定初始的时候电梯是空的，在1层，所以第一条指令必须是FR指令，否则该指令被删除直至第一条指令是FR为止
9. 我所定义的输出是这三种解释：n是停下的层数；方向是指：停在这一层之前是什么运动方式，就是以什么运动方向来到本层的；如果指令不导致楼层的变动，就保持原来的状态，up还是上一个up，down还是上一个down；t是指到达这一层那一瞬间的相对时间（不包括开关门的时间），初始时零。初始时的电梯状态会以(1,DOWN,0)的形式输出。
10. 电梯如果停在某一楼层，就会做一个完整的开关门动作，然后保持关门状态。当然，最初始时门是关着的。
11. 为了安全起见，如果电梯到达某楼层后0.5秒在同层楼发布FR指令，如果乘客想趁停在本层的时候进去，对不起，不得进入。因为留给乘客的时间不多，从停止到开关门统共就一秒，考虑到先下后上，等下电梯的人都下去了，准备在该层楼上电梯的乘客过了半秒钟才想进去，太晚了，门准备关了，强行进去的话一不小心就容易被门夹到，不安全。所以必须将该FR指令当作下一条命令执行。
12. 所有的问题都共享以下前提：发出FR指令的人未必都会进电梯，发出ER指令的人未必出电梯，但是初始状态的时候电梯里一定没有人，不可能发出ER指令；无论到达哪一层停下，电梯都会进行一个开关门的动作，用时一秒；
13. 楼层为负、楼层的数字有三位以上数字、时间在6位以上等会被认为是输入不合法，无法调度。
14. 在不影响正确性的前提下，所有的输入空格都会被清除
15. 每一次合法输入都会对应有一个输出
16. 空的指令会导致无法调度电梯
17.^(((\\(FR,\\d{1,2},(UP|DOWN),\\d{1,6}\\))|(\\(ER,\\d{1,2},\\d{1,6}\\)))\\.)*((\\(FR,\\d{1,2},(UP|DOWN),\\d{1,6}\\))|(\\(ER,\\d{1,2},\\d{1,6}\\)))$是合法输入的正则表达式，违背这个表达式的输入都被认定是无法调度电梯的。
18. 如果输入的所有的指令都是错误的指令，（比如在10楼按UP，第一条指令是ER并且一直都是一直都在被删除等），最终会导致输入不合法，不予调度。例如(FR, 20, UP, 0).(ER, 10, 5).(FR,15, DOWN, 1596)。
19. 本程序支持第一条指令不是从0时刻开始的。不过按照实验要求，最好不要这么做。但是，若输入的部分请求有错误被删除，导致最后可执行的命令队列中第一个指令的命令时间并非为零，计算出结果后，并不算是程序bug也不能算是程序逻辑有误。
20. 楼层如果为负数，认定为是非法输入，不予调度电梯。
21. 因为采取了捎带机制，所以同时发布的请求某种意义上不再是不合法的时间序列。但是本程序不做容纳同时发布请求的取舍处理机制的扩展，所以同时输入的请求依然被认定是不合法的时间序列。在这里认定，时间按照升序排列的请求依然符合非降序的要求，升序属于非降序。
22. 从现在开始认定，FR指令中的方向是有意义的，至少在判断是否顺路的时候是有意义的。比如不要指望在某层楼按了向下的按钮后，上行的电梯还会顺便搭上你。主请求如果是FR，FR的上下不代表进入的人一定会向上或向下。
23. 如果电梯是静止的，则接收到的第一个请求就是当前主要请求，不接受反方向的请求。
24. 当前主响应请求完成后，如果没有紧接着处理的下一个主响应，哪怕再方便，电梯也会优先处理未处理队列中的最开始的那个，将其作为下一个主响应请求。例如主响应请求是到9层，未处理的请求中第一个是下到2层，第二个是上到10层。那么本电梯会在处理完到达9层的响应后处理下到2层的指令，随后再处理到达10层的指令。
25. 作业2中的程序说明曾解释了电梯中最开始不能有人，请求序列最开始的时候不能是ER，所有的开头的ER会被删除。但是，由于有了捎带机制，所以可能出现在傻瓜调度下符合事实逻辑的指令变得看上去不再符合之前定义的事实逻辑。所以，事实逻辑变更为：最开始的时候电梯中可能有人，但初始的请求序列依然不得以ER开头，否则将删除开头的ER直到开头的是FR指令为止。（强行解释）。
26. 如果一个主请求完成了，但是有可能有捎带请求没完成，这个请求中的第一个就会成为下一个主请求。这样的请求会被列在捎带序列的最后，在捎带序列中不会按照捎带的顺序排列。(成为混淆bug，此条已无效)
27. 第一个合法请求肯定是FR类，并且第一个请求楼层无论是几层，输出方向都会改为UP。
28. 更新：输出的时间序列，之前定义的最开始有一个(1,DOWN,0)不会再输出了。
29. 更新：最终输出运行结果序列的时候是有方向如果在同层不变，不输出这一项。
30. 在运行过程中恰好经过某层楼时，发布ER、FR同层请求，电梯将不停止。即不能急停。
31. 继承机制用在了Dipatcher1里；interface用在了Status上；toString在Dispatcher1中，用于将一个ArrayList生成为String。本程序中某些类中为了方便，在不影响功能实现的前提下使用了部分共有属性，基本法里并没有限制本次作业的共有属性的使用。
32. 如果在电梯停住的后0.5秒发布同层打开电梯的请求，乘客不得入内，电梯不予捎带这样的请求。
33. 每开一次门就输出一次，时间是开门前的一瞬间的时间.
34. 在某一层停下，开关门（1S）后在当层发出的请求不会被认为是捎带请求。
35. 在某一层停下，这一瞬间发布同层楼的请求，会被捎带.
36. 输入格式不变，输出为1、请求列表，格式是（Primary_request）（（carrying requests1）（carrying requests2））。（Primary_request）（carrying requests1）就是输入的样子，捎带请求放在括号里，中间没有括号隔开。2、按照时间排序的停靠时间和方向的表。
37. STAY状态是本次程序新增的。只有在主请求完成后，后来的主请求在同一层提出时才会出现。
38. 如果有一连串同层请求，那么他们都会被看作是一个个的主请求，除非它们是同时的才可能被捎带，然而本程序并不支持同时请求。
*不予计算，报错，直接报错，输入不合法等字眼被认定是无法进行电梯调度  

可敬的兄弟/可爱的菇凉：
	鄙人尽力完成了本程序的设计和调试。
	如果阁下发现了本程序的错误和疏漏，一定不要留情，您发现的错误对于鄙人在学习技术的过程中的进步和成长有帮助。千里之堤溃于蚁穴，在我日后可能酿成更大错误之前，这进一步探穴求错的过程就交由给阁下完成了。（不过扣分的力度小一点是坠吼的哈）
	请不吝赐教。
	多谢/Thank you/ありがとう
									本程序制作人



Readme for assignment 5
1.	上次的readme仍具有一定参考价值。不过经过大改，已经说不清楚这“一定”具体是多少，如果有矛盾，以本文档的为准，本文档是更新版。
2.	电梯最早的时候处于出发状态，就是在一楼等住的状态。
3.	电梯一旦启动永不停止。线程一旦启动就不会停止，如果要终止，请按terminate键终结这个进程。
4.	停在某一层，就输出停靠信息，格式(电梯号, 楼层, 运动方向, 累计运动量，当前相对时间)，（各个信息的位置如上，具体呈现以实物为准）时间单位是秒。输出的时间是到达某楼层或者是停在某一层正准备开门的时刻。这个时间点在开关门之前。就是输出的时间是到达某一层楼的时刻，不包括开关门的时间。
5.	输出的时间可能会随着时间的推移而产生误差，误差可能体现在比如：理论上同时输入并同时被电梯运行的请求，它们最终输出时间的相差可能不是精准的3.0*（楼层差）秒，这可能是代码的运行占用的时间累积造成的，还有可能是由于获取系统时间后进行的四舍五入所导致。此程序输出的时间是当前系统时间减去线程开始时获取的系统时间的差值，也就是从线程启动至今的相对秒数。
6.	发布的请求目标是不同层，则会输出刚好到目标楼层的时间；如果发布同层请求，则输出的时间就是开关门前的时刻。不同时发布的请求，其对应输出的时间肯定不能简单的用3.0*（楼层差）秒来计算。
7.	输出的已完成请求的格式统一为：（类型，楼层，电梯号，方向）。如果类型是FR， 则电梯号是0；如果是ER， 方向是“-”。每停一次就输出停在这一层时完成的请求。每一个发布的请求都会被输出，如果它们是重复的，它们总共只会被处理一次，也就是电梯停一次，停靠信息输出一次，但是这些重复的请求会被一个个输出，valid request(s) is(are) as follow和the request that has been accomplished:都是如此。
8.	在本程序中，电梯到达某层停下就会输出到达这一层楼的时间而非请求完成的时间，根据基本法，到达某一层后包括开关门完成才算请求 完成，但这里不是强制要求。没说输出的时间非得是完成请求时的时刻。所以特在此解释以免误解。
9.	如果当前主请求完成，电梯的运动方向就会改为STAY。
10.	输入一波请求之后，会随即输出这一波请求中所有的合法请求。之后进入运动状态，可以输入请求。
11.	一波请求的输入格式^(((\\(FR,\\d{1,2},(UP|DOWN)\\))|(\\(ER,\\#\\d{1},\\d{1,2}\\)))\\.)*((\\(FR,\\d{1,2},(UP|DOWN)\\))|(\\(ER,\\#\\d{1},\\d{1,2}\\)))$。如(FR, 10, DOWN).(ER, #1, 12)这是一波两个请求。不合输入规范的，格式不同于上述定义的，输入的一整行都会被认定是不合法输入，不产生任何电梯运行相关结果。比如，如果输入的前5个请求满足格式，后几个请求不满足，依然以不合格式不予处理论处。
12.	被过滤的错误请求只有在所有请求满足格式的前提下，楼层超过20层和小于1层，电梯号大于3小于1，20层上和1层下等。若违背上述格式，以不合法输入论处，一律不予处理。
13.	字符串一行不能长于100个字符，否则整个请求被忽略，就跟未输入请求一样不产生任何结果。
14.	一波请求最多只有5个。一波请求被认为是现实中在同一时刻被输入的请求。
15.	同时的请求有n(0<=n<=5)个，但是处理的时候，排序在前面的请求有优先权，在线程的时间作用下可能会导致时间上看上去与理论值有细微出入。
16.	如果出现以下情况：输入请求的时候，两个电梯不能捎带，一个电梯处于停止状。态，即空闲状态。那么在此情况下，两个不能捎带的电梯无论此后对于这个请求会变得多么的方便，都不会再处理这个请求，这个请求会被发布请求时空闲的电梯处理。
17.	如果不止一个电梯对同一个请求的响应方便程度相同，则响应电梯的顺序是电梯1>2>3。
18.	忠告，FR型指令的方向是有意义的。在这里我们假定按UP的人就是想上楼，按DOWN的就是想下楼，至少他或她在按按钮的时候是这么想的。所以，比如，有人按下了按钮发出了(FR, 6, UP)指令，电梯运行期间有人发布(FR, 6, DOWN),那么一号电梯将会完成前一个 指令，后一个指令会由2号电梯完成。这就体现了UP和DOWN方向的意义，不能指望同一楼层同时存在UP和DOWN的情况下一台电梯就能够满足这两类人的需求，不然就不合情理了。
19.	例: 最开始的时候输入例如(FR, 5, DOWN).(FR,4, DOWN)的请求。由于多多少少带有优先权，所以(FR, 5, DOWN)能被1号电梯运行，成为主请求。(FR,4, DOWN)由于方向问题，是不能被1号电梯捎带的，所以它会被2号电梯运行，成为2号电梯的主请求。
类似的问题同样可以用这个道理解释。
20.	依然不能急停，到了当前楼层的时刻发布到本楼层的请求，根据设计不能停下来。
21.	电梯一开始的状态是STAY,同层请求输出的状态是STAY
22.	第一个请求是ER被删除的原定义现已不适用。
23.	由于程序的时间计算很精确，而输入请求在人工的操作下具有的时间不确定性相对较大。测试者以自我感觉的时间读秒为依据来认定本程序在时间节点的判断上是否出现偏差，在精确度要求不高的时候这样的判断是有一定根据的；但如果测试者以此作为精确结果指出本程序的问题，无异于以人的判断来衡量机器对时间把控的精准程度，这样的想法纯属天方夜谭，这样的判断纯属吹毛求疵，基于此做出的论断缺乏说服力。
24.	做OO的目的就在于锻炼编程能力，编程的重点是功能的正确性。如果您找到了我程序在运算、计算等方面的毛病，发现了我的程序在设计上的硬伤，比如计算出来的结果有错，捎带错误等，不要留情，敬请指正，（检查求严，扣分求轻，能扣2分尽量不扣4分，能扣1分尽量不扣两分，打滚泪目卖萌求答应）在这方面您的指正就是对我的帮助，谢谢。如果是一些无关紧要、不影响结果正确性、不影响功能的正确发挥的问题，比如输出格式出了一些小问题，莫名多了一些空格空行之类，那么万望您高抬贵手，谢谢。

